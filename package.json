{
  "name": "vscode-autohotkey-debug",
  "version": "1.11.0",
  "description": "Advanced debugging support for AutoHotkey(includes H) v1 and v2",
  "author": "zero-plusplus <git@zero-plusplus.com>",
  "license": "MIT",
  "main": "./build/client/extension",
  "repository": {
    "type": "git",
    "url": "https://github.com/zero-plusplus/vscode-autohotkey-debug.git"
  },
  "bugs": {
    "url": "https://github.com/zero-plusplus/vscode-autohotkey-debug/issues"
  },
  "scripts": {
    "build": "ts-node scripts/bin/build.ts",
    "clean": "ts-node scripts/bin/clean.ts",
    "watch": "ts-node scripts/bin/watch.ts",
    "watch:public": "ts-node scripts/bin/watch.public.ts",
    "lint": "ts-node scripts/bin/lint.ts",
    "test": "jest --runInBand --detectOpenHandles",
    "test:sandbox": "ts-node scripts/bin/sandbox.ts",
    "package": "ts-node scripts/bin/package.ts"
  },
  "publisher": "zero-plusplus",
  "sponsor": {
    "url": "https://github.com/sponsors/zero-plusplus"
  },
  "engines": {
    "vscode": "^1.85.0"
  },
  "icon": "icon.png",
  "keywords": [
    "ahk",
    "autohotkey",
    "debug",
    "dbgp"
  ],
  "categories": [
    "Debuggers"
  ],
  "activationEvents": [
    "onDebug",
    "onLanguage:ahk",
    "onLanguage:ahk2",
    "onLanguage:ah2"
  ],
  "contributes": {
    "breakpoints": [
      {
        "language": "ahk"
      },
      {
        "language": "ahk2"
      },
      {
        "language": "ah2"
      }
    ],
    "commands": [
      {
        "command": "vscode-autohotkey-debug.variables-view.viewValue",
        "title": "View Value"
      },
      {
        "command": "vscode-autohotkey-debug.variables-view.viewAsText",
        "title": "View as Text"
      },
      {
        "command": "vscode-autohotkey-debug.variables-view.ViewAsEachBaseNumbers",
        "title": "View as Each Base Numbers"
      },
      {
        "command": "vscode-autohotkey-debug.variables-view.copyAsText",
        "title": "Copy as Text"
      },
      {
        "command": "vscode-autohotkey-debug.variables-view.copyAsBinary",
        "title": "Copy as Binary"
      },
      {
        "command": "vscode-autohotkey-debug.variables-view.copyAsDecimal",
        "title": "Copy as Decimal"
      },
      {
        "command": "vscode-autohotkey-debug.variables-view.copyAsHex",
        "title": "Copy as Hex"
      },
      {
        "command": "vscode-autohotkey-debug.variables-view.copyAsScientificNotation",
        "title": "Copy as Scientific Notation"
      },
      {
        "command": "vscode-autohotkey-debug.variables.pinnedFile",
        "title": "Returns the path to the first pinned file found"
      },
      {
        "command": "vscode-autohotkey-debug.variables.firstFile",
        "title": "Returns the path of the first file found in the first tab group"
      },
      {
        "command": "vscode-autohotkey-debug.variables.lastFile",
        "title": "Returns the path of the last file found in the last tab group"
      },
      {
        "command": "vscode-autohotkey-debug.commands.runToEndOfFunction",
        "title": "Break at end of function"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "vscode-autohotkey-debug.variables-view.viewValue",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.viewAsText",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.ViewAsEachBaseNumbers",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsText",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsBinary",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsDecimal",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsHex",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsScientificNotation",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables.pinnedFile",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables.firstFile",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.variables.lastFile",
          "when": "false"
        },
        {
          "command": "vscode-autohotkey-debug.commands.runToEndOfFunction",
          "when": "false"
        }
      ],
      "debug/variables/context": [
        {
          "command": "vscode-autohotkey-debug.variables-view.viewValue",
          "when": "debugConfigurationType == 'autohotkey' && debugProtocolVariableMenuContext == 'string' || debugProtocolVariableMenuContext == 'number'",
          "group": "1_view@1"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.viewAsText",
          "when": "debugConfigurationType == 'autohotkey' && debugProtocolVariableMenuContext == 'string'",
          "group": "1_view@2"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.ViewAsEachBaseNumbers",
          "when": "debugConfigurationType == 'autohotkey' && debugProtocolVariableMenuContext == 'number'",
          "group": "1_view@3"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsText",
          "when": "debugConfigurationType == 'autohotkey' && debugProtocolVariableMenuContext == 'string'",
          "group": "5_cutcopypaste@90"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsBinary",
          "when": "debugConfigurationType == 'autohotkey' && debugProtocolVariableMenuContext == 'number'",
          "group": "5_cutcopypaste@91"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsDecimal",
          "when": "debugConfigurationType == 'autohotkey' && debugProtocolVariableMenuContext == 'number'",
          "group": "5_cutcopypaste@92"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsHex",
          "when": "debugConfigurationType == 'autohotkey' && debugProtocolVariableMenuContext == 'number'",
          "group": "5_cutcopypaste@93"
        },
        {
          "command": "vscode-autohotkey-debug.variables-view.copyAsScientificNotation",
          "when": "debugConfigurationType == 'autohotkey' && debugProtocolVariableMenuContext == 'number'",
          "group": "5_cutcopypaste@94"
        }
      ]
    },
    "debuggers": [
      {
        "type": "autohotkey",
        "label": "AutoHotkey",
        "languages": [
          "ahk",
          "ahk2",
          "ah2"
        ],
        "program": "./build/src/dap/debugAdapter.js",
        "runtime": "node",
        "configurationAttributes": {
          "launch": {
            "additionalProperties": false,
            "properties": {
              "runtime": {
                "type": "string",
                "description": "The path to AutoHotkey.exe. If you specify a relative path, the current directory is \"C:/Program Files/AutoHotkey\". Also extension(i.e. \".exe\") is optional.",
                "default": "AutoHotkey.exe"
              },
              "runtime_v1": {
                "type": "string",
                "description": "This is the \"runtime\" when the extension is \".ahk\". If runtime is set, it takes precedence.",
                "default": "AutoHotkey.exe"
              },
              "runtime_v2": {
                "type": "string",
                "description": "This is the \"runtime\" when the extension is \".ahk2\" or \".ah2\". If \"runtime\" is set, it takes precedence.",
                "default": "v2/AutoHotkey.exe"
              },
              "runtimeArgs": {
                "type": "array",
                "items": [
                  {
                    "type": "string",
                    "examples": [
                      "/force",
                      "/restart",
                      "/CP65001",
                      "/ErrorStdOut",
                      "/ErrorStdOut=UTF-8",
                      "/include"
                    ]
                  }
                ],
                "description": "Arguments to pass to AutoHotkey.exe. However \"/debug\" will be ignored.",
                "examples": [
                  [
                    "/CP65001",
                    "/ErrorStdOut"
                  ],
                  [
                    "/CP65001",
                    "/ErrorStdOut=UTF-8"
                  ]
                ],
                "default": [
                  "/CP65001",
                  "/ErrorStdOut"
                ]
              },
              "runtimeArgs_v1": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "/f",
                    "/force",
                    "/r",
                    "/restart",
                    "/CP65001",
                    "/ErrorStdOut",
                    "/ErrorStdOut=UTF-8",
                    "/include"
                  ]
                },
                "description": "This is the \"runtimeArgs\" when the extension is \".ahk\". If \"runtimeArgs\" is set, it takes precedence.",
                "examples": [
                  [
                    "/CP65001",
                    "/ErrorStdOut"
                  ],
                  [
                    "/CP65001",
                    "/ErrorStdOut=UTF-8"
                  ]
                ],
                "default": [
                  "/CP65001",
                  "/ErrorStdOut"
                ]
              },
              "runtimeArgs_v2": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "/force",
                    "/restart",
                    "/CP65001",
                    "/ErrorStdOut",
                    "/ErrorStdOut=UTF-8",
                    "/include"
                  ]
                },
                "description": "This is the \"runtimeArgs\" when the extension is \".ahk2\" or \".ah2\". If \"runtimeArgs\" is set, it takes precedence.",
                "examples": [
                  [
                    "/CP65001",
                    "/ErrorStdOut"
                  ],
                  [
                    "/CP65001",
                    "/ErrorStdOut=UTF-8"
                  ]
                ],
                "default": [
                  "/CP65001",
                  "/ErrorStdOut"
                ]
              },
              "cwd": {
                "type": "string",
                "description": "The absolute path of the current working directory."
              },
              "hostname": {
                "type": "string",
                "description": "No changes are required.",
                "default": "localhost"
              },
              "port": {
                "type": [
                  "string",
                  "number"
                ],
                "examples": [
                  "9002-9010"
                ],
                "description": "A port to be assigned to the debugger. Basically, you don't need to change it, but if you want to debug more than one at the same time, you need to set different ports for each.",
                "default": 9002
              },
              "program": {
                "type": "string",
                "description": "The absolute path to the script you want to debug.",
                "default": "${file}"
              },
              "args": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Arguments to be passed to \"program\"",
                "default": []
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "description": "Environment variable to be set during debugging. if set to null, it will be treated as an empty string.",
                "default": {}
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "If true, it will break immediately after attach.",
                "default": false
              },
              "maxChildren": {
                "type": "number",
                "description": "The maximum number of child elements of the object to be retrieved. Basically, there is no need to change it.",
                "default": 10000
              },
              "openFileOnExit": {
                "type": "string",
                "description": "The absolute path of the script you want to open when the debugging is finished. This is useful if you want to quickly edit a specific script.",
                "default": "${file}"
              },
              "useIntelliSenseInDebugging": {
                "type": "boolean",
                "description": "Enable / disable IntelliSense in Debugging. If you have installed another extension that supports IntelliSense, it is recommended to disable this feature.",
                "default": true
              },
              "usePerfTips": {
                "type": [
                  "boolean",
                  "string",
                  "object"
                ],
                "examples": [
                  "{GetMetaVar(\"elapsedTime_s\")}s elapsed"
                ],
                "additionalProperties": false,
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Content to be displayed. See the README for detailed instructions on how to set it up.",
                    "examples": [
                      "{GetMetaVar(\"elapsedTime_s\")}s elapsed"
                    ],
                    "default": "{GetMetaVar(\"elapsedTime_s\")}s elapsed"
                  },
                  "fontColor": {
                    "type": "string",
                    "description": "Set the `color` of CSS.",
                    "default": "gray"
                  },
                  "fontStyle": {
                    "type": "string",
                    "description": "Set the `font-style` of CSS.",
                    "default": "italic",
                    "examples": [
                      "normal",
                      "italic",
                      "oblique"
                    ]
                  }
                },
                "description": "Enable / disable PerfTips. See the README for detailed instructions on how to set it up.",
                "default": false
              },
              "useDebugDirective": {
                "type": [
                  "boolean",
                  "object"
                ],
                "additionalProperties": false,
                "properties": {
                  "useBreakpointDirective": {
                    "type": "boolean",
                    "description": "Enable / disable Breakpoint directive.",
                    "default": true
                  },
                  "useOutputDirective": {
                    "type": "boolean",
                    "description": "Enable / disable Output directive.",
                    "default": true
                  },
                  "useClearConsoleDirective": {
                    "type": "boolean",
                    "description": "Enable / disable ClearConsole directive.",
                    "default": true
                  }
                },
                "description": "Enable / disable Debug directive. See the README for detailed instructions on how to set it up.",
                "default": false
              },
              "useAutoJumpToError": {
                "type": "boolean",
                "description": "Open the error source when debugging is terminated due to an load-time error. This takes precedence over `openFileOnExit`.",
                "default": false
              },
              "useUIAVersion": {
                "type": "boolean",
                "description": "If you don't know about UIA, ignore it. This setting must be `true` if you want to use the UIA version of AutoHotkey. There are some limitations, please check the README.",
                "default": false
              },
              "useOutputDebug": {
                "type": [
                  "boolean",
                  "object"
                ],
                "description": "Whether to show OutputDebug in the debug console. Or more detailed settings about its behavior.",
                "additionalProperties": false,
                "properties": {
                  "category": {
                    "type": "string",
                    "enum": [
                      "stdout",
                      "stderr",
                      "console"
                    ],
                    "default": "stderr"
                  },
                  "useTrailingLinebreak": {
                    "type": "boolean",
                    "description": "Add a trailing linebreak. If the trailing line is a linebreak, do nothing.",
                    "default": false
                  }
                },
                "default": true
              },
              "useAnnounce": {
                "type": [
                  "boolean",
                  "string"
                ],
                "enum": [
                  false,
                  true,
                  "error",
                  "detail",
                  "develop"
                ],
                "description": "Enable / disable announcements from the debug adapter. If \"error\" is specified, only errors will be displayed. If \"detail\" is specified, more detailed announcements will be displayed. If `develop` is specified, additional logs are output in case of problems with the extension in addition to the logs in `detail`.",
                "default": true
              },
              "useLoadedScripts": {
                "type": [
                  "boolean",
                  "object"
                ],
                "additionalProperties": false,
                "properties": {
                  "scanImplicitLibrary": {
                    "type": "boolean",
                    "description": "It scans for implicitly used libraries and displays them in Loaded Scripts. However, it will slow down the start of debugging. This attribute also affects the debug directive.",
                    "default": true
                  }
                },
                "description": "Enable / disable Loaded Scripts. If disabled, the debug startup time will be faster.",
                "default": true
              },
              "useExceptionBreakpoint": {
                "type": "boolean",
                "description": "If set `true`, exception breakpoint can be enabled. But this feature requires that the runtime supports exception breakpoint.",
                "default": true
              },
              "skipFunctions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of functions names to skip when executing steps. The name corresponds to wildcard."
              },
              "skipFiles": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of file paths to skip when executing steps. The path corresponds to glob."
              },
              "extends": {
                "type": "string",
                "description": "Specifies the `name` attribute of another configuration. Inherits all attributes of the matched configuration."
              },
              "variableCategories": {
                "type": [
                  "string",
                  "array"
                ],
                "description": "Customize a group of variables for data inspection.",
                "examples": [
                  "recommend",
                  []
                ],
                "items": {
                  "type": [
                    "string",
                    "object"
                  ],
                  "examples": [
                    "Local",
                    "Static",
                    "Global",
                    {}
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "The title displayed in the group."
                    },
                    "source": {
                      "type": [
                        "string",
                        "array"
                      ],
                      "description": "Specifies \"Local\", \"Global\". If you are using AutoHotkey_H, additionally you can specify \"Static\". If you want to use multiple sources, specify them as an array.",
                      "examples": [
                        "Local",
                        "Static",
                        "Global",
                        []
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "Local",
                          "Static",
                          "Global"
                        ]
                      }
                    },
                    "hidden": {
                      "type": [
                        "boolean",
                        "string"
                      ],
                      "description": "Show / hide categories. If \"auto\" is specified, the category will be hidden when the variable in the category is 0.",
                      "examples": [
                        "auto"
                      ],
                      "default": false
                    },
                    "noduplicate": {
                      "type": "boolean",
                      "description": "Disallow / allow duplication with variables of different categories that have the same source. This attribute can only be set for one of the categories that have the same source.",
                      "default": false
                    },
                    "matchers": {
                      "type": "array",
                      "description": "An object representing a match condition. If multiple conditions are specified, all of them will be matched or not.",
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "examples": [
                          "*",
                          "Local",
                          "Static",
                          "Global",
                          {}
                        ],
                        "additionalProperties": false,
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "If you want to filter variable that match the conditions, specify \"exclude\". Otherwise, omit this attribute or specify \"include\".",
                            "enum": [
                              "include",
                              "exclude"
                            ]
                          },
                          "pattern": {
                            "type": "string",
                            "description": "Regular expression patterns for variable name."
                          },
                          "ignorecase": {
                            "type": "boolean",
                            "description": "If true, matcher.pattern will ignore case."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type name recognized by the debugger.",
                            "enum": [
                              "undefined",
                              "string",
                              "number",
                              "integer",
                              "float",
                              "primitive",
                              "object"
                            ]
                          },
                          "className": {
                            "type": "string",
                            "description": "The class name recognized by the debugger.",
                            "examples": [
                              "Class",
                              "Func",
                              "Object"
                            ]
                          },
                          "builtin": {
                            "type": "boolean",
                            "description": "Whether it is a built-in variable or not."
                          },
                          "static": {
                            "type": "boolean",
                            "description": "Whether it is a static variable or not."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "setHiddenBreakpoints": {
                "type": "array",
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "A label for `breakpoints` to be displayed in the Exception Breakpoints UI"
                        },
                        "breakpoints": {
                          "type": "array",
                          "description": "Hidden breakpoints to associate with `label`.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "target": {
                                "type": [
                                  "string",
                                  "array"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "description": "Target for setting the hidden breakpoint. Specify a glob path or function/method/property name with wildcard. If it ends in `()` such as `func()`, only functions/methods are targeted, if it ends in `[]`, properties are targeted. If specified in an array, hidden breakpoints are set on all targets that match the condition."
                              },
                              "line": {
                                "anyOf": [
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "pattern": {
                                        "type": "string",
                                        "description": "Regular expression to be applied to each line."
                                      },
                                      "ignoreCase": {
                                        "type": "boolean",
                                        "description": "Make the `pattern` case-insensitive when matching."
                                      },
                                      "select": {
                                        "type": [
                                          "string",
                                          "number",
                                          "array"
                                        ],
                                        "items": {
                                          "type": "number"
                                        },
                                        "enum": [
                                          "first",
                                          "last",
                                          "all"
                                        ],
                                        "description": "Controls whether some or all breakpoints are set when multiple lines are matched. When omitted, \"all\" is specified."
                                      },
                                      "offset": {
                                        "type": "number",
                                        "description": "Offset from matched line."
                                      }
                                    }
                                  }
                                ],
                                "description": "A line number (1-base) to set the hidden breakpoint. Or a matcher to identify the line number. If a negative line number is given, it is treated as an offset from the end. By specifying an array, it is possible to set a hidden breakpoint on multiple lines."
                              },
                              "condition": {
                                "type": "string",
                                "description": "A condition to be set for the hidden breakpoint."
                              },
                              "hitCondition": {
                                "type": "string",
                                "description": "A hit condition to be set for the hidden breakpoint."
                              },
                              "log": {
                                "type": "string",
                                "description": "A log message to be set for the hidden breakpoint."
                              },
                              "action": {
                                "type": "string",
                                "enum": [
                                  "ClearConsole"
                                ],
                                "description": "An action to be executed when a hidden breakpoint is reached."
                              },
                              "break": {
                                "type": "boolean",
                                "description": "If `false` is specified, no break is made. If omitted, `false` is set if `log` or `action` is specified, otherwise `true`.",
                                "default": true
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "target": {
                          "type": [
                            "string",
                            "array"
                          ],
                          "items": {
                            "type": "string"
                          },
                          "description": "Target for setting the hidden breakpoint. Specify a glob path or function/method/property name with wildcard. If it ends in `()` such as `func()`, only functions/methods are targeted, if it ends in `[]`, properties are targeted. If specified in an array, hidden breakpoints are set on all targets that match the condition."
                        },
                        "line": {
                          "anyOf": [
                            {
                              "type": "number"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "pattern": {
                                  "type": "string",
                                  "description": "Regular expression to be applied to each line."
                                },
                                "ignoreCase": {
                                  "type": "boolean",
                                  "description": "Make the `pattern` case-insensitive when matching."
                                },
                                "select": {
                                  "type": [
                                    "string",
                                    "number",
                                    "array"
                                  ],
                                  "items": {
                                    "type": "number"
                                  },
                                  "enum": [
                                    "first",
                                    "last",
                                    "all"
                                  ],
                                  "description": "Controls whether some or all breakpoints are set when multiple lines are matched. When omitted, \"all\" is specified."
                                },
                                "offset": {
                                  "type": "number",
                                  "description": "Offset from matched line."
                                }
                              }
                            }
                          ],
                          "description": "A line number (1-base) to set the hidden breakpoint. Or a matcher to identify the line number. If a negative line number is given, it is treated as an offset from the end. By specifying an array, it is possible to set a hidden breakpoint on multiple lines."
                        },
                        "condition": {
                          "type": "string",
                          "description": "A condition to be set for the hidden breakpoint."
                        },
                        "hitCondition": {
                          "type": "string",
                          "description": "A hit condition to be set for the hidden breakpoint."
                        },
                        "log": {
                          "type": "string",
                          "description": "A log message to be set for the hidden breakpoint."
                        },
                        "action": {
                          "type": "string",
                          "enum": [
                            "ClearConsole"
                          ],
                          "description": "An action to be executed when a hidden breakpoint is reached."
                        },
                        "break": {
                          "type": "boolean",
                          "description": "If `false` is specified, no break is made. If omitted, `false` is set if `log` or `action` is specified, otherwise `true`.",
                          "default": true
                        }
                      }
                    }
                  ]
                }
              },
              "trace": {
                "type": "boolean",
                "description": "No changes are required. This is a settings for developers to use to find bugs. Enable / disable display trace informaiton for debugger adapter.",
                "default": false
              }
            }
          },
          "attach": {
            "additionalProperties": false,
            "properties": {
              "runtime": {
                "type": "string",
                "description": "The path to AutoHotkey.exe to run the script to attach to the `program`. If you specify a relative path, the current directory is \"C:/Program Files/AutoHotkey\". Also extension(i.e. \".exe\") is optional.",
                "default": "AutoHotkey.exe"
              },
              "hostname": {
                "type": "string",
                "description": "No changes are required.",
                "default": "localhost"
              },
              "port": {
                "type": [
                  "string",
                  "number"
                ],
                "examples": [
                  "9002-9010"
                ],
                "description": "A port to be assigned to the debugger. Basically, you don't need to change it, but if you want to debug more than one at the same time, you need to set different ports for each.",
                "default": 9002
              },
              "program": {
                "type": "string",
                "description": "The path of the script file you want to attach.",
                "default": ""
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "If false, it runs until it stops at a breakpoint. Set it to true if you want it to stop at the first line, as in SciTE4AutoHotkey.",
                "default": false
              },
              "maxChildren": {
                "type": "number",
                "description": "The maximum number of child elements of the object to be retrieved. Basically, there is no need to change it.",
                "default": 10000
              },
              "openFileOnExit": {
                "type": "string",
                "description": "The absolute path of the script you want to open when the debugging is finished. This is useful if you want to quickly edit a specific script.",
                "default": "${file}"
              },
              "useIntelliSenseInDebugging": {
                "type": "boolean",
                "description": "Enable / disable IntelliSense in Debugging. If you have installed another extension that supports IntelliSense, it is recommended to disable this feature.",
                "default": true
              },
              "usePerfTips": {
                "type": [
                  "boolean",
                  "string",
                  "object"
                ],
                "examples": [
                  "{GetMetaVar(\"elapsedTime_s\")}s elapsed"
                ],
                "additionalProperties": false,
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Content to be displayed. See the README for detailed instructions on how to set it up.",
                    "examples": [
                      "{GetMetaVar(\"elapsedTime_s\")}s elapsed"
                    ],
                    "default": "{GetMetaVar(\"elapsedTime_s\")}s elapsed"
                  },
                  "fontColor": {
                    "type": "string",
                    "description": "Set the `color` of CSS.",
                    "default": "gray"
                  },
                  "fontStyle": {
                    "type": "string",
                    "description": "Set the `font-style` of CSS.",
                    "default": "italic",
                    "examples": [
                      "normal",
                      "italic",
                      "oblique"
                    ]
                  }
                },
                "description": "Enable / disable PerfTips. See the README for detailed instructions on how to set it up.",
                "default": false
              },
              "useDebugDirective": {
                "type": [
                  "boolean",
                  "object"
                ],
                "additionalProperties": false,
                "properties": {
                  "useBreakpointDirective": {
                    "type": "boolean",
                    "description": "Enable / disable Breakpoint directive.",
                    "default": true
                  },
                  "useOutputDirective": {
                    "type": "boolean",
                    "description": "Enable / disable Output directive.",
                    "default": true
                  },
                  "useClearConsoleDirective": {
                    "type": "boolean",
                    "description": "Enable / disable ClearConsole directive.",
                    "default": true
                  }
                },
                "description": "Enable / disable Debug directive. See the README for detailed instructions on how to set it up.",
                "default": false
              },
              "useAutoJumpToError": {
                "type": "boolean",
                "description": "Open the error source when debugging is terminated due to an load-time error. This takes precedence over `openFileOnExit`.",
                "default": false
              },
              "useOutputDebug": {
                "type": [
                  "boolean",
                  "object"
                ],
                "description": "Whether to show OutputDebug in the debug console. Or more detailed settings about its behavior.",
                "additionalProperties": false,
                "properties": {
                  "category": {
                    "type": "string",
                    "enum": [
                      "stdout",
                      "stderr",
                      "console"
                    ],
                    "default": "stderr"
                  },
                  "prefix": {
                    "type": "string",
                    "description": "String to be appended to the prefix of the message."
                  },
                  "suffix": {
                    "type": "string",
                    "description": "String to be appended to the suffix of the message."
                  },
                  "removeTrailingLinebreak": {
                    "type": "boolean",
                    "description": "Remove the trailing line-break(\"`r`n\" or \"`n\") character.",
                    "default": false
                  }
                },
                "default": true
              },
              "useAnnounce": {
                "type": [
                  "boolean",
                  "string"
                ],
                "enum": [
                  false,
                  true,
                  "error",
                  "detail",
                  "develop"
                ],
                "description": "Enable / disable announcements from the debug adapter. If \"error\" is specified, only errors will be displayed. If \"detail\" is specified, more detailed announcements will be displayed. If `develop` is specified, additional logs are output in case of problems with the extension in addition to the logs in `detail`.",
                "default": true
              },
              "useLoadedScripts": {
                "type": [
                  "boolean",
                  "object"
                ],
                "additionalProperties": false,
                "properties": {
                  "scanImplicitLibrary": {
                    "type": "boolean",
                    "description": "It scans for implicitly used libraries and displays them in Loaded Scripts. However, it will slow down the start of debugging. This attribute also affects the debug directive.",
                    "default": true
                  }
                },
                "description": "Enable / disable Loaded Scripts. If disabled, the debug startup time will be faster.",
                "default": true
              },
              "useExceptionBreakpoint": {
                "type": "boolean",
                "description": "If set `true`, exception breakpoint can be enabled. But this feature requires that the runtime supports exception breakpoint.",
                "default": true
              },
              "skipFunctions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of functions names to skip when executing steps. The name corresponds to wildcard."
              },
              "skipFiles": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of file paths to skip when executing steps. The path corresponds to glob."
              },
              "extends": {
                "type": "string",
                "description": "Specifies the `name` attribute of another configuration. Inherits all attributes of the matched configuration."
              },
              "variableCategories": {
                "type": [
                  "string",
                  "array"
                ],
                "description": "Customize a group of variables for data inspection.",
                "examples": [
                  "recommend",
                  []
                ],
                "items": {
                  "type": [
                    "string",
                    "object"
                  ],
                  "examples": [
                    "Local",
                    "Static",
                    "Global",
                    {}
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "The title displayed in the group."
                    },
                    "source": {
                      "type": [
                        "string",
                        "array"
                      ],
                      "description": "Specifies \"Local\", \"Global\". If you are using AutoHotkey_H, additionally you can specify \"Static\". If you want to use multiple sources, specify them as an array.",
                      "examples": [
                        "Local",
                        "Static",
                        "Global",
                        []
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "Local",
                          "Static",
                          "Global"
                        ]
                      }
                    },
                    "hidden": {
                      "type": [
                        "boolean",
                        "string"
                      ],
                      "description": "Show / hide categories. If \"auto\" is specified, the category will be hidden when the variable in the category is 0.",
                      "examples": [
                        "auto"
                      ],
                      "default": false
                    },
                    "noduplicate": {
                      "type": "boolean",
                      "description": "Disallow / allow duplication with variables of different categories that have the same source. This attribute can only be set for one of the categories that have the same source.",
                      "default": false
                    },
                    "matchers": {
                      "type": "array",
                      "description": "An object representing a match condition. If multiple conditions are specified, all of them will be matched or not.",
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "examples": [
                          "*",
                          "Local",
                          "Static",
                          "Global",
                          {}
                        ],
                        "additionalProperties": false,
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "If you want to filter variable that match the conditions, specify \"exclude\". Otherwise, omit this attribute or specify \"include\".",
                            "enum": [
                              "include",
                              "exclude"
                            ]
                          },
                          "pattern": {
                            "type": "string",
                            "description": "Regular expression patterns for variable name."
                          },
                          "ignorecase": {
                            "type": "boolean",
                            "description": "If true, matcher.pattern will ignore case."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type name recognized by the debugger.",
                            "enum": [
                              "undefined",
                              "string",
                              "number",
                              "integer",
                              "float",
                              "primitive",
                              "object"
                            ]
                          },
                          "className": {
                            "type": "string",
                            "description": "The class name recognized by the debugger.",
                            "examples": [
                              "Class",
                              "Func",
                              "Object"
                            ]
                          },
                          "builtin": {
                            "type": "boolean",
                            "description": "Whether it is a built-in variable or not."
                          },
                          "static": {
                            "type": "boolean",
                            "description": "Whether it is a static variable or not."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "setHiddenBreakpoints": {
                "type": "array",
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "A label for `breakpoints` to be displayed in the Exception Breakpoints UI"
                        },
                        "breakpoints": {
                          "type": "array",
                          "description": "Hidden breakpoints to associate with `label`.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "target": {
                                "type": [
                                  "string",
                                  "array"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "description": "Target for setting the hidden breakpoint. Specify a glob path or function/method/property name with wildcard. If it ends in `()` such as `func()`, only functions/methods are targeted, if it ends in `[]`, properties are targeted. If specified in an array, hidden breakpoints are set on all targets that match the condition."
                              },
                              "line": {
                                "anyOf": [
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "pattern": {
                                        "type": "string",
                                        "description": "Regular expression to be applied to each line."
                                      },
                                      "ignoreCase": {
                                        "type": "boolean",
                                        "description": "Make the `pattern` case-insensitive when matching."
                                      },
                                      "select": {
                                        "type": [
                                          "string",
                                          "number",
                                          "array"
                                        ],
                                        "items": {
                                          "type": "number"
                                        },
                                        "enum": [
                                          "first",
                                          "last",
                                          "all"
                                        ],
                                        "description": "Controls whether some or all breakpoints are set when multiple lines are matched. When omitted, \"all\" is specified."
                                      },
                                      "offset": {
                                        "type": "number",
                                        "description": "Offset from matched line."
                                      }
                                    }
                                  }
                                ],
                                "description": "A line number (1-base) to set the hidden breakpoint. Or a matcher to identify the line number. If a negative line number is given, it is treated as an offset from the end. By specifying an array, it is possible to set a hidden breakpoint on multiple lines."
                              },
                              "condition": {
                                "type": "string",
                                "description": "A condition to be set for the hidden breakpoint."
                              },
                              "hitCondition": {
                                "type": "string",
                                "description": "A hit condition to be set for the hidden breakpoint."
                              },
                              "log": {
                                "type": "string",
                                "description": "A log message to be set for the hidden breakpoint."
                              },
                              "action": {
                                "type": "string",
                                "enum": [
                                  "ClearConsole"
                                ],
                                "description": "An action to be executed when a hidden breakpoint is reached."
                              },
                              "break": {
                                "type": "boolean",
                                "description": "If `false` is specified, no break is made. If omitted, `false` is set if `log` or `action` is specified, otherwise `true`.",
                                "default": true
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "target": {
                          "type": [
                            "string",
                            "array"
                          ],
                          "items": {
                            "type": "string"
                          },
                          "description": "Target for setting the hidden breakpoint. Specify a glob path or function/method/property name with wildcard. If it ends in `()` such as `func()`, only functions/methods are targeted, if it ends in `[]`, properties are targeted. If specified in an array, hidden breakpoints are set on all targets that match the condition."
                        },
                        "line": {
                          "anyOf": [
                            {
                              "type": "number"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "pattern": {
                                  "type": "string",
                                  "description": "Regular expression to be applied to each line."
                                },
                                "ignoreCase": {
                                  "type": "boolean",
                                  "description": "Make the `pattern` case-insensitive when matching."
                                },
                                "select": {
                                  "type": [
                                    "string",
                                    "number",
                                    "array"
                                  ],
                                  "items": {
                                    "type": "number"
                                  },
                                  "enum": [
                                    "first",
                                    "last",
                                    "all"
                                  ],
                                  "description": "Controls whether some or all breakpoints are set when multiple lines are matched. When omitted, \"all\" is specified."
                                },
                                "offset": {
                                  "type": "number",
                                  "description": "Offset from matched line."
                                }
                              }
                            }
                          ],
                          "description": "A line number (1-base) to set the hidden breakpoint. Or a matcher to identify the line number. If a negative line number is given, it is treated as an offset from the end. By specifying an array, it is possible to set a hidden breakpoint on multiple lines."
                        },
                        "condition": {
                          "type": "string",
                          "description": "A condition to be set for the hidden breakpoint."
                        },
                        "hitCondition": {
                          "type": "string",
                          "description": "A hit condition to be set for the hidden breakpoint."
                        },
                        "log": {
                          "type": "string",
                          "description": "A log message to be set for the hidden breakpoint."
                        },
                        "action": {
                          "type": "string",
                          "enum": [
                            "ClearConsole"
                          ],
                          "description": "An action to be executed when a hidden breakpoint is reached."
                        },
                        "break": {
                          "type": "boolean",
                          "description": "If `false` is specified, no break is made. If omitted, `false` is set if `log` or `action` is specified, otherwise `true`.",
                          "default": true
                        }
                      }
                    }
                  ]
                }
              },
              "trace": {
                "type": "boolean",
                "description": "No changes are required. This is a settings for developers to use to find bugs. Enable / disable display trace informaiton for debugger adapter.",
                "default": false
              }
            }
          }
        },
        "configurationSnippets": [
          {
            "label": "AutoHotkey Attach",
            "description": "A new configuration for debugging by attach a user selected script.",
            "body": {
              "name": "AutoHotkey Attach",
              "type": "autohotkey",
              "request": "attach"
            }
          },
          {
            "label": "AutoHotkey Attach (Advanced Configuration)",
            "description": "A new advanced configuration for debugging by attach a user selected script.",
            "body": {
              "name": "AutoHotkey Attach",
              "type": "autohotkey",
              "request": "attach",
              "port": "9002-9010",
              "variableCategories": "recommend",
              "useDebugDirective": true,
              "useAutoJumpToError": true
            }
          },
          {
            "label": "AutoHotkey Debug",
            "description": "A new configuration for debugging the current open file (ahk or ahk2, ah2).",
            "body": {
              "name": "AutoHotkey Debug",
              "type": "autohotkey",
              "request": "launch",
              "program": "^\"\\${file}\"",
              "args": []
            }
          },
          {
            "label": "AutoHotkey Debug (Advanced Configuration)",
            "description": "A new advanced configuration for debugging the current open file (ahk or ahk2, ah2).",
            "body": {
              "name": "AutoHotkey Debug",
              "type": "autohotkey",
              "request": "launch",
              "program": "^\"\\${file}\"",
              "args": [],
              "port": "9002-9010",
              "variableCategories": "recommend",
              "useDebugDirective": true,
              "useAutoJumpToError": true
            }
          },
          {
            "label": "AutoHotkey Debug (Publisher Recommanded)",
            "description": "A new advanced configuration recommended by the publisher for debugging the current open file (ahk or ahk2, ah2).",
            "body": {
              "name": "AutoHotkey Debug",
              "type": "autohotkey",
              "request": "launch",
              "program": "^\"\\${file}\"",
              "runtimeArgs": [
                "/CP65001",
                "/ErrorStdOut=UTF-8"
              ],
              "args": [],
              "port": "9002-9010",
              "useAnnounce": "detail",
              "useAutoJumpToError": true,
              "useDebugDirective": true,
              "usePerfTips": true,
              "useOutputDebug": {
                "useTrailingLinebreak": true
              },
              "openFileOnExit": "${file}",
              "variableCategories": "recommend"
            }
          }
        ]
      }
    ]
  },
  "dependencies": {
    "@types/dedent": "^0.7.0",
    "@types/semver": "^7.3.12",
    "@zero-plusplus/autohotkey-utilities": "github:zero-plusplus/node-autohotkey-utilities#develop",
    "async-lock": "^1.2.8",
    "convert-hrtime": "^3.0.0",
    "fast-glob": "^3.2.7",
    "fast-xml-parser": "^3.21.1",
    "he": "^1.2.0",
    "jsonc-parser": "^3.2.0",
    "lazy-promise": "^4.0.0",
    "lodash": "^4.17.20",
    "matcher": "^4.0.0",
    "normalize-path": "^3.0.0",
    "ohm-js": "^16.4.0",
    "path-exists": "^4.0.0",
    "pcre-to-regexp": "^1.1.0",
    "read-dir-deep": "^7.0.1",
    "regex-parser": "^2.2.11",
    "semver": "^7.3.7",
    "tcp-port-used": "^1.0.2",
    "underscore.string": "^3.3.5",
    "vscode-uri": "^2.1.2",
    "wildcard-match": "^5.1.2"
  },
  "devDependencies": {
    "@jest/globals": "^29.3.1",
    "@types/async-lock": "^1.1.2",
    "@types/convert-hrtime": "^3.0.2",
    "@types/fs-extra": "^9.0.13",
    "@types/he": "^1.1.1",
    "@types/jest": "^29.2.3",
    "@types/lodash": "^4.14.165",
    "@types/matcher": "^2.0.0",
    "@types/node": "^13.13.2",
    "@types/normalize-path": "^3.0.0",
    "@types/tcp-port-used": "^1.0.1",
    "@types/underscore": "^1.11.15",
    "@types/underscore.string": "^0.0.38",
    "@types/vscode": "^1.85.0",
    "@vscode/debugadapter": "^1.64.0",
    "@vscode/debugprotocol": "^1.64.0",
    "@vscode/vsce": "^2.22.0",
    "@zero-plusplus/eslint-my-rules": "github:zero-plusplus/eslint-my-rules",
    "del": "^6.1.1",
    "esbuild": "^0.14.54",
    "fs-extra": "^10.1.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.2",
    "type-fest": "^4.10.2",
    "typescript": "^5.3.3",
    "vscode-debugadapter-testsupport": "^1.40.3"
  }
}
